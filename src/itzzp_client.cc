#include "itzzp.h"

ZZ* zzp_client_modulus(dbsize_t w) {
    ZZ p1, p2;
    if (w == 2048) {
    	p1 = to_ZZ("208647130951457402363969335056365957472826150618980217460328400485971950387185944410889077723063406198415802830757517777351462262669194793047360775411639408116452523756687066355086195124187048682420529316060567502352699557841412039275095485224490337148164650010000499984813523719988826268799665657866626493329");
    	p2 = to_ZZ("245210205383950153265232956846271987008710436579074459102383753214859717124121302267932009072054546430711727811323033561244148876933172687995163379778095734152594201215411509169035373484564340604271927100344464582888777887746436564737355045100633587336239754449508771770564607896955672999950235015535154415867");
    } else if (w == 1536) {
    	p1 = to_ZZ("1762848592595080314705600925431624874456855439794595868418019480189213868063348394981842423875338178991362893712297567682392276281463789141688306484765105096429658863055172316227409205756175078509101834587188923103831602929062176351");
    	p2 = to_ZZ("2306072568237159640249655953989533876736033293267891813492402870069702343561490811306173449455816459207943593196801405361355605814646339972518285709494570145269396000374210678514250118174550977925517522811232946347459478425104006037");
    } else if (w == 1024) {
    	p1 = to_ZZ("14710132128541592475387440366744304824352604767753216777226640368050037133836174845369895150342922969891066267019166301546403100960464521216972792406229873");
    	p2 = to_ZZ("23338263930359653850870152235447790059566299230626918909126959284529524161146399225204807633841208114717867386116272471253667601589249734409576687328158817");
    } else if (w == 8) {
    	p1 = to_ZZ("1");
    	p2 = to_ZZ("257");
    } else if (w == 16) {
    	p1 = to_ZZ("1");
    	p2 = to_ZZ("65537");
    } else if (w == 32) {
    	p1 = to_ZZ("1");
    	p2 = to_ZZ("4294967311");
    } else if (w == 96) {
    	p1 = to_ZZ("1");
    	p2 = to_ZZ("79228162514264337593543950397");
    } else if (w == 128) {
    	p1 = to_ZZ("1");
    	p2 = to_ZZ("340282366920938463463374607431768211507");
    } else if (w == 160) {
    	p1 = to_ZZ("1");
    	p2 = to_ZZ("2425980306017163398341728799446792216592523285797");
    } else if (w == 192) {
    	p1 = to_ZZ("1");
    	p2 = to_ZZ("6277101735386680763835789423207666416102355444464034513029");
    } else if (w == 256) {
    	p1 = to_ZZ("1");
    	p2 = to_ZZ("115792089237316195423570985008687907853269984665640564039457584007913129640233");
    } else {
        std::cerr << "Error: No modulus available for w = " << w << "." << std::endl;
	    exit(1);
    }
    ZZ* p =  new ZZ[2];
    p[0] = p1;
    p[1] = p2;
    return p;
}

ZPercyClient* client_zzp_new(nservers_t num_servers, nservers_t t, dbsize_t num_blocks, dbsize_t block_size,
                           dbsize_t word_size, nservers_t tau, bool spir) {
    ZZ* p = zzp_client_modulus(word_size);
    ZZ p1 = p[0];
    ZZ p2 = p[1];

    // Make a list of fake sids
    sid_t* sids = new sid_t[num_servers];
    for (int i = 0; i < num_servers; i++) {
        sids[i] = i + 1;
    }

    std::cout << p1 << " " << p2 << "       aaaaaaaaaaaaaaa \n";
    PercyParams * params =  new ZZ_pParams(num_blocks, block_size, word_size, p1* p2, tau, NULL, 1);
    PercyClientParams * clientparams =  new PercyClientParams(params, num_servers, 0); // CHECK is_null

    PercyClient* percy_client =  new PercyClient_ZZ_p(clientparams, num_servers, t, sids, NULL);
    ZPercyClient* client =  new ZPercyClient(percy_client);

    return client;
}
